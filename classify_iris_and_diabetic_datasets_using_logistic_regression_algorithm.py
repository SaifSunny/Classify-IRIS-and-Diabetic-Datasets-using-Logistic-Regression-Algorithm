# -*- coding: utf-8 -*-
"""Classify IRIS and Diabetic Datasets using Logistic Regression Algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CHRJ45XtBCs1_O50QbhKRd3m9ef571Hk

### **Iris Dataset Report**

Importing dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

"""Loading Iris dataset"""

iris = pd.read_csv("./iris.csv")
iris.head()

iris["variety"].value_counts()

"""Scatter Plot of Iris Dataset"""

sns.FacetGrid(iris, hue="variety",height=5).map(plt.scatter, "petal.length", "sepal.width").add_legend()

"""Logistic Regression

Preparing traning set
"""

X = iris.iloc[:, :-1]
y = iris.iloc[:, -1]

"""Ploting relation among the species"""

plt.xlabel('Features')
plt.ylabel('variety')

pltX = iris.loc[:, 'sepal.length']
pltY = iris.loc[:, 'variety']
plt.scatter(pltX, pltY, color='blue', Label='sepal.length')

pltX = iris.loc[:, 'sepal.width']
pltY = iris.loc[:, 'variety']
plt.scatter(pltX, pltY, color='red', Label='sepal.width')

pltX = iris.loc[:, 'petal.length']
pltY = iris.loc[:, 'variety']
plt.scatter(pltX, pltY, color='green', Label='petal.length')

pltX = iris.loc[:, 'petal.width']
pltY = iris.loc[:, 'variety']
plt.scatter(pltX, pltY, color='black', Label='petal.width')

plt.legend(loc=4, prop={'size':8})
plt.show()

"""spliting data train and test the model

"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model=LogisticRegression()
model.fit(x_train, y_train)

predictions = model.predict(x_test)

"""Accuracy of the model"""

print(accuracy_score(y_test, predictions))

"""Classification report"""

print(classification_report(y_test, predictions))

"""# **Diabetes Dataset Report**

Loading dataset
"""

diabetes = pd.read_csv("./diabetes.csv")
diabetes.head()

diabetes["Outcome"].value_counts()

"""Dataset Ploting"""

sns.FacetGrid(diabetes, hue="Outcome",height=5).map(plt.scatter, "BMI", "DiabetesPedigreeFunction").add_legend()

"""Logistic Regression

Preparing traning set
"""

X = diabetes.iloc[:, :-1]
y = diabetes.iloc[:, -1]

"""Ploting relation """

plt.xlabel('Factors')
plt.ylabel('Outcome')

pltX = diabetes.loc[:, 'Pregnancies']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='blue', Label='Pregnancies')

pltX = diabetes.loc[:, 'Glucose']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='darkolivegreen', Label='Glucose')

pltX = diabetes.loc[:, 'BloodPressure']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='green', Label='BloodPressure')

pltX = diabetes.loc[:, 'SkinThickness']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='black', Label='SkinThickness')

pltX = diabetes.loc[:, 'Insulin']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='pink', Label='Insulin')

pltX = diabetes.loc[:, 'BMI']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='orange', Label='BMI')

pltX = diabetes.loc[:, 'DiabetesPedigreeFunction']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='crimson', Label='DiabetesPedigreeFunction')

pltX = diabetes.loc[:, 'Age']
pltY = diabetes.loc[:, 'Outcome']
plt.scatter(pltX, pltY, color='violet', Label='Age')

plt.legend(loc=6, prop={'size':8})
plt.show()

"""spliting data train and test the model

"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model=LogisticRegression()
model.fit(x_train, y_train)

predictions = model.predict(x_test)

"""Accuracy of the model"""

print(accuracy_score(y_test, predictions))

"""Classification Report"""

print(classification_report(y_test, predictions))